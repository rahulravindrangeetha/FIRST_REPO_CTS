package test;

import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.MockitoAnnotations.initMocks;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.ui.ModelMap;

import com.booksandsubjectsmvchibernatedataboot.Book;
import com.booksandsubjectsmvchibernatedataboot.BookDao;
import com.booksandsubjectsmvchibernatedataboot.BookService;
import com.booksandsubjectsmvchibernatedataboot.BookServiceImpl;
import com.booksandsubjectsmvchibernatedataboot.Subject;
import com.booksandsubjectsmvchibernatedataboot.SubjectDao;
import com.booksandsubjectsmvchibernatedataboot.SubjectService;

public class ServiceTest 
{
	@InjectMocks
	private BookService bookService=new BookServiceImpl();
	
	@InjectMocks
	private SubjectService subjectService=new SubjectServiceImpl();;
	
	@Mock
	private BookDao bookDao;
	
	@Mock
	private SubjectDao subjectDao;
	
	
	@Before
	public void init()
	{
		initMocks(this);
	}
	
	@Test
	public void searchBookTest()
	{
		Book book= new Book();
		book.setBookId(1);
		book.setPrice(13.12);
		book.setTitle("abc");
		book.setPublishDate(LocalDate.parse("11-11-2011", DateTimeFormatter.ofPattern("dd-MM-yyyy")));
		when(bookDao.searchBook(any(Long.class))).thenReturn(book);
		String returnVal=bookService.searchBook(1,new ModelMap());
		assertTrue(returnVal.equalsIgnoreCase("bookInfo"));
		verify(bookDao).searchBook(any(Long.class));
	
	}
	
	@Test
	public void addBookTest()
	{
		Book book= new Book();
		book.setBookId(1);
		book.setPrice(13.12);
		book.setTitle("abc");
		book.setPublishDate(LocalDate.parse("11-11-2011", DateTimeFormatter.ofPattern("dd-MM-yyyy")));
		String returnVal=bookService.addBook(book);
		assertTrue(returnVal.equalsIgnoreCase("bookSuccess"));
		verify(bookDao).addBook(any(Book.class));
	
	}
	
	@Test
	public void deleteBookTest()
	{
		Book book= new Book();
		book.setBookId(1);
		book.setPrice(13.12);
		book.setTitle("abc");
		book.setPublishDate(LocalDate.parse("11-11-2011", DateTimeFormatter.ofPattern("dd-MM-yyyy")));
		when(bookDao.searchBook(any(Long.class))).thenReturn(book);
		String returnVal=bookService.deleteBook(1,new ModelMap());
		assertTrue(returnVal.equalsIgnoreCase("deleteBookInfo"));
		verify(bookDao).deleteBook(any(Long.class));
	
	}
	
	@Test
	public void searchSubjectTest()
	{
		Subject subject= new Subject();
		subject.setDurationInHours(111);
		subject.setSubjectId(1);
		subject.setSubTitle("abc");
		when(subjectDao.searchSubject(any(Long.class))).thenReturn(subject);
		String returnVal=subjectService.searchSubject(1,new ModelMap());
		assertTrue(returnVal.equalsIgnoreCase("subjectInfo"));
		verify(subjectDao).searchSubject(any(Long.class));
	
	}
	
	@Test
	public void addSubjectTest()
	{
		Subject subject= new Subject();
		subject.setDurationInHours(111);
		subject.setSubjectId(1);
		subject.setSubTitle("abc");
		String bookIds="1,2,3";
		String returnVal=subjectService.addSubject(subject,bookIds);
		assertTrue(returnVal.equalsIgnoreCase("subjectSuccess"));
		verify(subjectDao).addSubject(any(Subject.class));
	
	}
	
	@Test
	public void deleteSubjectTest()
	{
		Subject subject= new Subject();
		subject.setDurationInHours(111);
		subject.setSubjectId(1);
		subject.setSubTitle("abc");
		when(subjectDao.searchSubject(any(Long.class))).thenReturn(subject);
		String returnVal=subjectService.deleteSubject(1,new ModelMap());
		assertTrue(returnVal.equalsIgnoreCase("deleteSubjectInfo"));
		verify(subjectDao).deleteSubject(any(Long.class));
	
	}

}
